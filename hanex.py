import telebot
import os
import re
import requests
import json
import locale
import datetime
from telebot import types
from dotenv import load_dotenv
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from urllib.parse import urlparse, parse_qs

# Load keys from .env file
load_dotenv()
bot_token = os.getenv("BOT_TOKEN")
bot = telebot.TeleBot(bot_token)

# Set locale for number formatting
locale.setlocale(locale.LC_ALL, "en_US.UTF-8")

# Storage for the last error message ID
last_error_message_id = {}

# global variables
car_data = {}
car_id_external = ""


# Main menu creation function
def main_menu():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
    keyboard.add(
        types.KeyboardButton("üîç –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å –¥–æ –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫–∞"),
        types.KeyboardButton("‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É"),
        types.KeyboardButton("‚ÑπÔ∏è –û –∫–æ–º–ø–∞–Ω–∏–∏ HanExport"),
        types.KeyboardButton("üì¢ –ù–∞—à Telegram-–∫–∞–Ω–∞–ª"),
        types.KeyboardButton("üìû –°–≤—è–∑–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ WhatsApp"),
        types.KeyboardButton("üì∏ –ü–æ—Å–µ—Ç–∏—Ç—å –Ω–∞—à Instagram"),
    )
    return keyboard


# Start command handler
@bot.message_handler(commands=["start"])
def send_welcome(message):
    user_first_name = message.from_user.first_name
    welcome_message = (
        f"üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user_first_name}!\n"
        "–Ø –±–æ—Ç –∫–æ–º–ø–∞–Ω–∏–∏ HanExport –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∞–≤—Ç–æ –¥–æ –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫–∞! üöóüí∞\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:"
    )
    bot.send_message(message.chat.id, welcome_message, reply_markup=main_menu())


# Error message handling
def send_error_message(message, error_text):
    global last_error_message_id

    # Remove previous error message if it exists
    if last_error_message_id.get(message.chat.id):
        try:
            bot.delete_message(message.chat.id, last_error_message_id[message.chat.id])
        except Exception:
            pass

    # Send new error message and store its ID
    error_message = bot.reply_to(message, error_text)
    last_error_message_id[message.chat.id] = error_message.id


# Function to get car info using Selenium
def get_car_info(url):
    global car_id_external

    # Configure WebDriver
    chrome_options = Options()
    chrome_options.add_argument("--headless")
    chrome_options.add_argument("--disable-infobars")
    chrome_options.add_argument("--disable-extensions")
    chrome_options.add_argument("--disable-blink-features=AutomationControlled")
    chrome_options.add_argument(
        "user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.150 Safari/537.36"
    )

    service = Service(
        "/opt/homebrew/bin/chromedriver"
    )  # Specify your chromedriver path

    try:
        # Start the WebDriver
        driver = webdriver.Chrome(service=service, options=chrome_options)
        driver.get(url)

        # Check for reCAPTCHA
        if "reCAPTCHA" in driver.page_source:
            print("reCAPTCHA detected, please solve it manually.")
            input("Press Enter after solving reCAPTCHA...")

        # Parse the URL to get carid
        parsed_url = urlparse(url)
        query_params = parse_qs(parsed_url.query)
        car_id = query_params.get("carid", [None])[0]
        car_id_external = car_id

        # Find the gallery container
        gallery_element = driver.find_element(By.CSS_SELECTOR, "div.gallery_photo")
        items = gallery_element.find_elements(By.XPATH, ".//*")

        car_date = ""
        car_engine_capacity = ""
        car_price = ""

        for index, item in enumerate(items):
            if index == 10:
                car_date = item.text
            if index == 18:
                car_engine_capacity = item.text

        # Find the key info element
        keyinfo_element = driver.find_element(By.CSS_SELECTOR, "div.wrap_keyinfo")
        keyinfo_items = keyinfo_element.find_elements(By.XPATH, ".//*")
        keyinfo_texts = [item.text for item in keyinfo_items if item.text.strip() != ""]

        for index, info in enumerate(keyinfo_texts):
            if index == 12:
                car_price = info

        # Format values for the URL
        formatted_price = car_price.replace(",", "")
        formatted_engine_capacity = car_engine_capacity.replace(",", "")[0:-2]
        cleaned_date = "".join(filter(str.isdigit, car_date))
        formatted_date = f"01{cleaned_date[2:4]}{cleaned_date[:2]}"

        # Construct the new URL
        new_url = f"https://plugin-back-versusm.amvera.io/car-ab-korea/{car_id}?price={formatted_price}&date={formatted_date}&volume={formatted_engine_capacity}"

        return new_url

    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        return None

    finally:
        driver.quit()


# Function to calculate the total cost
def calculate_cost(link, message):
    global car_data

    print("–ù–û–í–´–ô –ó–ê–ü–†–û–°")

    bot.send_message(message.chat.id, "–î–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É ‚è≥")

    # Check if the link is from the mobile version
    if "fem.encar.com" in link:
        # Extract all digits from the mobile link
        car_id_match = re.findall(r"\d+", link)
        if car_id_match:
            car_id = car_id_match[0]  # Use the first match of digits
            # Create the new URL
            link = f"https://www.encar.com/dc/dc_cardetailview.do?carid={car_id}"
        else:
            send_error_message(message, "üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å carid –∏–∑ —Å—Å—ã–ª–∫–∏.")
            return

    # Get car info and new URL
    new_url = get_car_info(link)

    if new_url:
        response = requests.get(new_url)

        if response.status_code == 200:
            json_response = response.json()
            car_data = json_response

            # Extract year from the car date string
            year = json_response.get("result")["car"]["date"].split()[-1]
            engine_volume = json_response.get("result")["car"]["engineVolume"]
            price = json_response.get("result")["price"]["car"]["krw"]

            if year and engine_volume and price:
                engine_volume_formatted = f"{engine_volume} cc"
                age_formatted = calculate_age(year)

                total_cost = json_response.get("result")["price"]["grandTotal"]
                total_cost_formatted = format_number(total_cost)
                price_formatted = format_number(price)

                result_message = (
                    f"–í–æ–∑—Ä–∞—Å—Ç: {age_formatted}\n"
                    f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {price_formatted} KRW\n"
                    f"–û–±—ä—ë–º –¥–≤–∏–≥–∞—Ç–µ–ª—è: {engine_volume_formatted}\n\n"
                    f"–°—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è –ø–æ–¥ –∫–ª—é—á –≤–æ –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫: {total_cost_formatted}‚ÇΩ\n\n"
                    f"üîó [–°—Å—ã–ª–∫–∞ –Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—å]({link})\n\n"
                    "–î–∞–Ω–Ω–æ–µ –∞–≤—Ç–æ –ø–æ–ø–∞–¥–∞–µ—Ç –ø–æ–¥ —Å–∞–Ω–∫—Ü–∏–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —É—Ç–æ—á–Ω–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≤–∞—à—É —Å—Ç—Ä–∞–Ω—É —É –º–µ–Ω–µ–¥–∂–µ—Ä–∞ @hanexport11\n\n"
                    '–°—Ç–æ–∏–º–æ—Å—Ç—å "–ø–æ–¥ –∫–ª—é—á" –≤–∫–ª—é—á–∞–µ—Ç –≤ —Å–µ–±—è –≤—Å–µ —Ä–∞—Å—Ö–æ–¥—ã –¥–æ –≥. –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫, –∞ –∏–º–µ–Ω–Ω–æ: '
                    "–æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ –ö–æ—Ä–µ–µ, —Ñ—Ä–∞—Ö—Ç, —É—Å–ª—É–≥–∏ –±—Ä–æ–∫–µ—Ä–∞, —Å–∫–ª–∞–¥—ã –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è, "
                    "–ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –°–ë–ö–¢–° –∏ —Ç–∞–º–æ–∂–µ–Ω–Ω—É—é –ø–æ—à–ª–∏–Ω—É.\n\n"
                    "–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ –ú–µ–Ω—é.\n\n"
                    "–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –∑–∞–∫–∞–∑–∞ –∞–≤—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –Ω–∞—à–µ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É @hanexport11\n\n"
                    "üîó[–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª](https://t.me/hanexport1)\n"
                )

                bot.send_message(message.chat.id, result_message, parse_mode="Markdown")

                # Inline buttons for further actions
                keyboard = types.InlineKeyboardMarkup()
                keyboard.add(
                    types.InlineKeyboardButton(
                        "üìä –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å—á—ë—Ç–∞", callback_data="detail"
                    ),
                )
                keyboard.add(
                    types.InlineKeyboardButton(
                        "üìù –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –æ—Ç—á—ë—Ç –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ",
                        callback_data="technical_report",
                    ),
                )
                keyboard.add(
                    types.InlineKeyboardButton(
                        "‚úâÔ∏è –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", url="https://t.me/hanexport11"
                    ),
                )
                keyboard.add(
                    types.InlineKeyboardButton(
                        "üîç –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥—Ä—É–≥–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è",
                        callback_data="calculate_another",
                    ),
                )

                bot.send_message(
                    message.chat.id, "–ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ?", reply_markup=keyboard
                )
            else:
                bot.send_message(
                    message.chat.id,
                    "üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É.",
                )
        else:
            send_error_message(
                message,
                "üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            )
    else:
        send_error_message(
            message,
            "üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
        )


def get_insurance_total(car_id):
    # Configure WebDriver
    chrome_options = Options()
    chrome_options.add_argument("--disable-infobars")
    chrome_options.add_argument("--disable-extensions")
    chrome_options.add_argument("--headless")
    chrome_options.add_argument("--disable-blink-features=AutomationControlled")
    chrome_options.add_argument(
        "user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.150 Safari/537.36"
    )

    service = Service("/opt/homebrew/bin/chromedriver")

    # Define the URL
    url = f"http://www.encar.com/dc/dc_cardetailview.do?method=kidiFirstPop&carid={car_id}&wtClick_carview=044"

    try:
        driver = webdriver.Chrome(service=service, options=chrome_options)
        driver.get(url)

        # Check for reCAPTCHA presence
        if "reCAPTCHA" in driver.page_source:
            print("reCAPTCHA detected, please solve it manually.")
            input("Press Enter after solving reCAPTCHA...")

        try:
            smlist_element = driver.find_element(By.CLASS_NAME, "smlist")
            # –í—ã–≤–æ–¥–∏–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —ç–ª–µ–º–µ–Ω—Ç–∞
            smlist_list = smlist_element.text.split("\n")
            damage_to_my_car = (
                "0" if smlist_list[-2] == "ÏóÜÏùå" else smlist_list[-2].split(", ")[1]
            )
            damage_to_other_car = (
                "0" if smlist_list[-1] == "ÏóÜÏùå" else smlist_list[-1].split(", ")[1]
            )

            damage_to_my_car_formatted = ",".join(re.findall(r"\d+", damage_to_my_car))
            damage_to_other_car_formatted = ",".join(
                re.findall(r"\d+", damage_to_other_car)
            )
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç —Å –∫–ª–∞—Å—Å–æ–º 'smlist': {e}")

        # Optional: Process the text to extract relevant data
        return [damage_to_my_car_formatted, damage_to_other_car_formatted]

    except Exception as e:
        print(f"Error occurred: {e}")
        return "Error retrieving insurance details."

    finally:
        driver.quit()


# Callback query handler
@bot.callback_query_handler(func=lambda call: True)
def handle_callback_query(call):
    global car_data, car_id_external

    if call.data.startswith("detail"):
        details = {
            "car_price_korea": car_data.get("result")["price"]["car"]["rub"],
            "dealer_fee": car_data.get("result")["price"]["korea"]["ab"]["rub"],
            "korea_logistics": car_data.get("result")["price"]["korea"]["logistic"][
                "rub"
            ],
            "customs_fee": car_data.get("result")["price"]["korea"]["dutyCleaning"][
                "rub"
            ],
            "delivery_fee": car_data.get("result")["price"]["korea"]["delivery"]["rub"],
            "dealer_commission": car_data.get("result")["price"]["korea"][
                "dealerCommission"
            ]["rub"],
            "russiaDuty": car_data.get("result")["price"]["russian"]["duty"]["rub"],
            "recycle_fee": car_data.get("result")["price"]["russian"]["recyclingFee"][
                "rub"
            ],
            "registration": car_data.get("result")["price"]["russian"]["registration"][
                "rub"
            ],
            "sbkts": car_data.get("result")["price"]["russian"]["sbkts"]["rub"],
            "svhAndExpertise": car_data.get("result")["price"]["russian"][
                "svhAndExpertise"
            ]["rub"],
            "delivery": car_data.get("result")["price"]["russian"]["delivery"]["rub"],
        }

        # Construct cost breakdown message
        detail_message = (
            "üìù –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å—á—ë—Ç–∞:\n\n"
            f"–°—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ: {format_number(details['car_price_korea'])}‚ÇΩ\n"
            f"–£—Å–ª—É–≥–∏ HanExport: {format_number(details['dealer_fee'])}‚ÇΩ\n"
            f"–õ–æ–≥–∏—Å—Ç–∏–∫–∞ –ø–æ –Æ–∂–Ω–æ–π –ö–æ—Ä–µ–µ: {format_number(details['korea_logistics'])}‚ÇΩ\n"
            f"–¢–∞–º–æ–∂–µ–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞: {format_number(details['customs_fee'])}‚ÇΩ\n"
            f"–î–æ—Å—Ç–∞–≤–∫–∞ –¥–æ –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫–∞: {format_number(details['delivery_fee'])}‚ÇΩ\n"
            f"–ö–æ–º–∏—Å—Å–∏—è –¥–∏–ª–µ—Ä–∞: {format_number(details['dealer_commission'])}‚ÇΩ\n"
            f"–ï–¥–∏–Ω–∞—è —Ç–∞–º–æ–∂–µ–Ω–Ω–∞—è —Å—Ç–∞–≤–∫–∞ (–ï–¢–°): {format_number(details['russiaDuty'])}‚ÇΩ\n"
            f"–£—Ç–∏–ª–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–±–æ—Ä: {format_number(details['recycle_fee'])}‚ÇΩ\n"
            f"–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ: {format_number(details['registration'])}‚ÇΩ\n"
            f"–°–ë–ö–¢–°: {format_number(details['sbkts'])}‚ÇΩ\n"
            f"–°–í–• + –≠–∫—Å–ø–µ—Ä—Ç–∏–∑–∞: {format_number(details['svhAndExpertise'])}‚ÇΩ\n"
            f"–ü–µ—Ä–µ–≥–æ–Ω: {format_number(details['delivery'])}‚ÇΩ\n"
        )

        bot.send_message(call.message.chat.id, detail_message)

        # Inline buttons for further actions
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(
            types.InlineKeyboardButton(
                "üìâ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥—Ä—É–≥–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è",
                callback_data="calculate_another",
            )
        )
        keyboard.add(
            types.InlineKeyboardButton(
                "‚úâÔ∏è –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", url="https://t.me/hanexport11"
            )
        )

        bot.send_message(
            call.message.chat.id, "–ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ?", reply_markup=keyboard
        )

    elif call.data == "technical_report":
        # Retrieve insurance information
        insurance_info = get_insurance_total(car_id_external)

        # Construct the message for the technical report
        tech_report_message = (
            f"–°—Ç—Ä–∞—Ö–æ–≤—ã–µ –≤—ã–ø–ª–∞—Ç—ã –ø–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–º—É –∞–≤—Ç–æ–º–æ–±–∏–ª—é: {insurance_info[0]}‚Ç©\n\n"
            f"–°—Ç—Ä–∞—Ö–æ–≤—ã–µ –≤—ã–ø–ª–∞—Ç—ã –¥—Ä—É–≥–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –î–¢–ü: {insurance_info[1]}‚Ç©\n\n"
            f"[üîó –°—Å—ã–ª–∫–∞ –Ω–∞ —Å—Ö–µ–º—É –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π –∫—É–∑–æ–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ üîó](https://fem.encar.com/cars/report/inspect/{car_id_external})"
        )

        # Inline buttons for further actions
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(
            types.InlineKeyboardButton(
                "üìâ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥—Ä—É–≥–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è",
                callback_data="calculate_another",
            )
        )
        keyboard.add(
            types.InlineKeyboardButton(
                "‚úâÔ∏è –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", url="https://t.me/hanexport11"
            )
        )

        bot.send_message(
            call.message.chat.id,
            tech_report_message,
            parse_mode="Markdown",
            reply_markup=keyboard,
        )

    elif call.data == "calculate_another":
        bot.send_message(
            call.message.chat.id,
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—å —Å —Å–∞–π—Ç–∞ www.encar.com:",
        )


# Message handler for processing the car calculation request
@bot.message_handler(func=lambda message: True)
def handle_message(message):
    user_message = message.text

    if user_message == "üîç –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å –¥–æ –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫–∞":
        bot.send_message(
            message.chat.id,
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—å —Å —Å–∞–π—Ç–∞ www.encar.com:",
        )
    elif user_message == "‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É":
        bot.send_message(
            message.chat.id, "–í—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –ø–æ —Å—Å—ã–ª–∫–µ: @hanexport11"
        )
    elif user_message == "üìû –°–≤—è–∑–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ WhatsApp":
        whatsapp_link = "https://wa.me/821084266744"
        bot.send_message(
            message.chat.id,
            f"–í—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏ —á–µ—Ä–µ–∑ WhatsApp –ø–æ —Å—Å—ã–ª–∫–µ: {whatsapp_link}",
        )
    elif user_message == "‚ÑπÔ∏è –û –∫–æ–º–ø–∞–Ω–∏–∏ HanExport":
        about_message = (
            "HanExport ‚Äî —ç—Ç–æ –∫–æ–º–ø–∞–Ω–∏—è, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∞—è—Å—è –Ω–∞ —ç–∫—Å–ø–æ—Ä—Ç–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π "
            "–∏–∑ –Æ–∂–Ω–æ–π –ö–æ—Ä–µ–∏. –ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —à–∏—Ä–æ–∫–∏–π –≤—ã–±–æ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –∏ –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è "
            "–¥–ª—è –Ω–∞—à–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤."
        )
        bot.send_message(message.chat.id, about_message)
    elif user_message == "üì¢ –ù–∞—à Telegram-–∫–∞–Ω–∞–ª":
        channel_link = "https://t.me/hanexport1"
        bot.send_message(
            message.chat.id, f"–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –Ω–∞—à Telegram-–∫–∞–Ω–∞–ª: {channel_link}"
        )
    elif user_message == "üì∏ –ü–æ—Å–µ—Ç–∏—Ç—å –Ω–∞—à Instagram":
        instagram_link = "https://www.instagram.com/hanexport1"
        bot.send_message(message.chat.id, f"–ü–æ—Å–µ—Ç–∏—Ç–µ –Ω–∞—à Instagram: {instagram_link}")

    # Process the car URL
    elif user_message.startswith("http"):
        calculate_cost(user_message, message)


# Utility function to calculate the age category
def calculate_age(year):
    current_year = datetime.datetime.now().year
    age = current_year - int(year)

    if age < 3:
        return f"–î–æ 3 –ª–µ—Ç"
    elif 3 <= age < 5:
        return f"–æ—Ç 3 –¥–æ 5 –ª–µ—Ç"
    else:
        return f"–æ—Ç 5 –ª–µ—Ç"


def format_number(number):
    return locale.format_string("%d", number, grouping=True)


# Run the bot
if __name__ == "__main__":
    bot.polling(none_stop=True)
