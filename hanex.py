import time
import telebot
import os
import re
import requests
import locale
import datetime
import logging

from telebot import types
from dotenv import load_dotenv
from selenium import webdriver
from selenium.common.exceptions import NoSuchElementException
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from urllib.parse import urlparse, parse_qs
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, NoAlertPresentException


CAPSOLVER_API_KEY = os.getenv("CAPSOLVER_API_KEY")  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à API-–∫–ª—é—á CapSolver
CHROMEDRIVER_PATH = "/app/.chrome-for-testing/chromedriver-linux64/chromedriver"
# CHROMEDRIVER_PATH = "/opt/homebrew/bin/chromedriver"
# CHROMEDRIVER_PATH = "chromedriver"

PROXY_HOST = "45.118.250.2"
PROXY_PORT = "8000"
PROXY_USER = "B01vby"
PROXY_PASS = "GBno0x"

session = requests.Session()

# Configure logging
logging.basicConfig(
    filename="bot.log",
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
)

# Load keys from .env file
load_dotenv()
bot_token = os.getenv("BOT_TOKEN")
bot = telebot.TeleBot(bot_token)

# Set locale for number formatting
locale.setlocale(locale.LC_ALL, "en_US.UTF-8")

# Storage for the last error message ID
last_error_message_id = {}

# global variables
car_data = {}
car_id_external = ""
total_car_price = 0
usd_rate = 0
users = set()
admins = [7311593407, 728438182]


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫
def add_user_to_list(message):
    username = message.from_user.username

    if username:
        users.add(username)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
def is_admin(user_id):
    return user_id in admins  # –ó–¥–µ—Å—å —É–∫–∞–∂–∏—Ç–µ –≤–∞—à ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "admin_menu"
@bot.message_handler(commands=["admin"])
def admin_menu(message):
    if is_admin(message.from_user.id):
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(types.KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞"))
        bot.send_message(message.chat.id, "–ê–¥–º–∏–Ω –º–µ–Ω—é", reply_markup=keyboard)
    else:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω –º–µ–Ω—é.")


@bot.message_handler(
    func=lambda message: message.text == "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞"
)
def send_user_list(message):
    if is_admin(message.from_user.id):
        manager_id = admins[0]
        user_list = "\n".join(
            [f"@{username}" for username in users if username]
        )  # –°–ø–∏—Å–æ–∫ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        bot.send_message(manager_id, f"–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞:\n{user_list}")
        bot.send_message(message.chat.id, "–°–ø–∏—Å–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–µ–Ω–µ–¥–∂–µ—Ä—É.")
    else:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–º–∞–Ω–¥ –º–µ–Ω—é
def set_bot_commands():
    commands = [
        types.BotCommand("start", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        types.BotCommand("cbr", "–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç"),
        types.BotCommand("admin", "–ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"),
    ]
    bot.set_my_commands(commands)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç —Å API
def get_currency_rates():
    global usd_rate

    print_message("–ö–£–†–° –¶–ë")

    url = "https://www.cbr-xml-daily.ru/daily_json.js"
    response = requests.get(url)
    data = response.json()

    # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç
    eur = data["Valute"]["EUR"]["Value"]
    usd = data["Valute"]["USD"]["Value"]
    krw = data["Valute"]["KRW"]["Value"] / data["Valute"]["KRW"]["Nominal"]
    cny = data["Valute"]["CNY"]["Value"]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ usd
    usd_rate = usd

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
    rates_text = (
        f"–ö—É—Ä—Å –≤–∞–ª—é—Ç –¶–ë:\n\n"
        f"EUR {eur:.4f} ‚ÇΩ\n"
        f"USD {usd:.4f} ‚ÇΩ\n"
        f"KRW {krw:.4f} ‚ÇΩ\n"
        f"CNY {cny:.4f} ‚ÇΩ"
    )

    return rates_text


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cbr
@bot.message_handler(commands=["cbr"])
def cbr_command(message):
    add_user_to_list(message)  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–æ

    try:
        rates_text = get_currency_rates()

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(
            types.InlineKeyboardButton(
                "üîç –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è", callback_data="calculate_another"
            )
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫—É—Ä—Å–∞–º–∏ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        bot.send_message(message.chat.id, rates_text, reply_markup=keyboard)
    except Exception as e:
        bot.send_message(
            message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç: {e}")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /currencyrates
@bot.message_handler(commands=["currencyrates"])
def currencyrates_command(message):
    bot.send_message(
        message.chat.id, "–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç: ..."
    )  # –õ–æ–≥–∏–∫–∞ –¥–ª—è –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç


# Main menu creation function
def main_menu():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
    keyboard.add(
        types.KeyboardButton("–†–∞—Å—á—ë—Ç"),
        types.KeyboardButton("–ù–∞–ø–∏—Å–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É"),
        types.KeyboardButton("–û –∫–æ–º–ø–∞–Ω–∏–∏ HanExport"),
        types.KeyboardButton("–ù–∞—à Telegram-–∫–∞–Ω–∞–ª"),
        types.KeyboardButton("–°–≤—è–∑–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ WhatsApp"),
        types.KeyboardButton("–ü–æ—Å–µ—Ç–∏—Ç—å –Ω–∞—à Instagram"),
    )
    return keyboard


# Start command handler
@bot.message_handler(commands=["start"])
def send_welcome(message):
    user_first_name = message.from_user.first_name

    add_user_to_list(message)

    welcome_message = (
        f"üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user_first_name}!\n"
        "–Ø –±–æ—Ç –∫–æ–º–ø–∞–Ω–∏–∏ HanExport –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∞–≤—Ç–æ –¥–æ –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫–∞! üöóüí∞\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:"
    )
    bot.send_message(message.chat.id, welcome_message, reply_markup=main_menu())


# Error handling function
def send_error_message(message, error_text):
    global last_error_message_id

    # Remove previous error message if it exists
    if last_error_message_id.get(message.chat.id):
        try:
            bot.delete_message(message.chat.id, last_error_message_id[message.chat.id])
        except Exception as e:
            logging.error(f"Error deleting message: {e}")

    # Send new error message and store its ID
    error_message = bot.reply_to(message, error_text, reply_markup=main_menu())
    last_error_message_id[message.chat.id] = error_message.id
    logging.error(f"Error sent to user {message.chat.id}: {error_text}")


def check_and_handle_alert(driver):
    try:
        WebDriverWait(driver, 3).until(EC.alert_is_present())
        alert = driver.switch_to.alert
        print(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ: {alert.text}")
        alert.accept()  # –ó–∞–∫—Ä—ã–≤–∞–µ—Ç alert
        print("–í—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ –±—ã–ª–æ –∑–∞–∫—Ä—ã—Ç–æ.")
    except TimeoutException:
        print("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤—Å–ø–ª—ã–≤–∞—é—â–µ–≥–æ –æ–∫–Ω–∞.")
    except Exception as alert_exception:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ alert: {alert_exception}")


def wait_for_page_to_load(driver, timeout=10):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã."""
    WebDriverWait(driver, timeout).until(
        lambda d: d.execute_script("return document.readyState") == "complete"
    )


def get_car_info(url):
    global car_id_external

    chrome_options = Options()
    chrome_options.add_argument("--disable-gpu")
    chrome_options.add_argument("--no-sandbox")  # –ù–µ–æ–±—Ö–æ–¥–∏–º –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ Heroku
    chrome_options.add_argument("--headless")  # –ù–µ–æ–±—Ö–æ–¥–∏–º –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ Heroku
    chrome_options.add_argument("--disable-dev-shm-usage")  # –†–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–∞–º—è—Ç—å—é
    chrome_options.add_argument("--disable-software-rasterizer")
    chrome_options.add_argument("--disable-blink-features=AutomationControlled")
    chrome_options.add_argument("--disable-extensions")
    chrome_options.add_argument("--log-level=3")  # –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –ª–æ–≥–æ–≤
    chrome_options.add_argument("--disable-application-cache")
    chrome_options.add_argument("--disable-web-security")
    chrome_options.add_argument("--allow-running-insecure-content")
    chrome_options.add_argument("--disable-autofill")
    chrome_options.add_argument(
        "user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.150 Safari/537.36"
    )

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥—Ä–∞–π–≤–µ—Ä–∞
    service = Service(CHROMEDRIVER_PATH)
    driver = webdriver.Chrome(
        service=service,
        options=chrome_options,
    )

    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
        driver.get(url)
        check_and_handle_alert(driver)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ reCAPTCHA
        if "reCAPTCHA" in driver.page_source:
            print("–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ reCAPTCHA. –ü—ã—Ç–∞–µ–º—Å—è —Ä–µ—à–∏—Ç—å...")
            driver.refresh()
            print("–°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ—Å–ª–µ reCAPTCHA.")
            check_and_handle_alert(driver)

        wait_for_page_to_load(driver)

        # –ü–∞—Ä—Å–∏–º URL –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è carid
        parsed_url = urlparse(url)
        query_params = parse_qs(parsed_url.query)
        car_id = query_params.get("carid", [None])[0]
        car_id_external = car_id

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ areaLeaseRent
        try:
            print("–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ areaLeaseRent")

            lease_area = driver.find_element(By.ID, "areaLeaseRent")
            title_element = lease_area.find_element(By.CLASS_NAME, "title")

            if "Î¶¨Ïä§Ï†ïÎ≥¥" in title_element.text or "Î†åÌä∏Ï†ïÎ≥¥" in title_element.text:
                print("–î–∞–Ω–Ω–∞—è –º–∞—à–∏–Ω–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ª–∏–∑–∏–Ω–≥–µ.")
                return [
                    "",
                    "–î–∞–Ω–Ω–∞—è –º–∞—à–∏–Ω–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ª–∏–∑–∏–Ω–≥–µ. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º.",
                ]
        except NoSuchElementException:
            print("–≠–ª–µ–º–µ–Ω—Ç areaLeaseRent –Ω–µ –Ω–∞–π–¥–µ–Ω.")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ gallery_photo
        try:
            print("–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ gallery_photo")

            gallery_element = WebDriverWait(driver, 10).until(
                EC.visibility_of_element_located((By.CLASS_NAME, "gallery_photo"))
            )
            car_title = gallery_element.find_element(By.CLASS_NAME, "prod_name").text
            items = gallery_element.find_elements(By.XPATH, ".//*")

            if len(items) > 10:
                car_date = items[10].text
            if len(items) > 18:
                car_engine_capacity = items[18].text

            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª—é—á–∞—Ö
            try:
                keyinfo_element = driver.find_element(
                    By.CSS_SELECTOR, "div.wrap_keyinfo"
                )
                keyinfo_items = keyinfo_element.find_elements(By.XPATH, ".//*")
                keyinfo_texts = [
                    item.text for item in keyinfo_items if item.text.strip()
                ]

                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–µ–Ω—É, –µ—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                car_price = (
                    re.sub(r"\D", "", keyinfo_texts[12])
                    if len(keyinfo_texts) > 12
                    else None
                )
            except NoSuchElementException:
                print("–≠–ª–µ–º–µ–Ω—Ç wrap_keyinfo –Ω–µ –Ω–∞–π–¥–µ–Ω.")

        except NoSuchElementException:
            print("–≠–ª–µ–º–µ–Ω—Ç gallery_photo —Ç–∞–∫–∂–µ –Ω–µ –Ω–∞–π–¥–µ–Ω.")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ product_left
        try:
            print("–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ product_left")

            product_left = WebDriverWait(driver, 7).until(
                EC.visibility_of_element_located((By.CLASS_NAME, "product_left"))
            )
            product_left_splitted = product_left.text.split("\n")

            car_title = product_left.find_element(
                By.CLASS_NAME, "prod_name"
            ).text.strip()

            car_date = (
                product_left_splitted[3] if len(product_left_splitted) > 3 else ""
            )
            car_engine_capacity = (
                product_left_splitted[6] if len(product_left_splitted) > 6 else ""
            )
            car_price = re.sub(r"\D", "", product_left_splitted[1])

            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            formatted_price = car_price.replace(",", "")
            formatted_engine_capacity = (
                car_engine_capacity.replace(",", "")[:-2]
                if car_engine_capacity
                else "0"
            )
            cleaned_date = "".join(filter(str.isdigit, car_date))
            formatted_date = (
                f"01{cleaned_date[2:4]}{cleaned_date[:2]}" if cleaned_date else "010101"
            )

            # –°–æ–∑–¥–∞–Ω–∏–µ URL
            new_url = f"https://plugin-back-versusm.amvera.io/car-ab-korea/{car_id}?price={formatted_price}&date={formatted_date}&volume={formatted_engine_capacity}"
            print(f"–î–∞–Ω–Ω—ã–µ –æ –º–∞—à–∏–Ω–µ –ø–æ–ª—É—á–µ–Ω—ã: {new_url}, {car_title}")

            return [new_url, car_title]
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ product_left: {e}")

        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è URL
        formatted_price = car_price.replace(",", "") if car_price else "0"
        formatted_engine_capacity = (
            car_engine_capacity.replace(",", "")[:-2] if car_engine_capacity else "0"
        )
        cleaned_date = "".join(filter(str.isdigit, car_date))
        formatted_date = (
            f"01{cleaned_date[2:4]}{cleaned_date[:2]}" if cleaned_date else "010101"
        )

        # –ö–æ–Ω–µ—á–Ω—ã–π URL
        new_url = f"https://plugin-back-versusm.amvera.io/car-ab-korea/{car_id}?price={formatted_price}&date={formatted_date}&volume={formatted_engine_capacity}"

        driver.quit()

        print(f"–î–∞–Ω–Ω—ã–µ –æ –º–∞—à–∏–Ω–µ –ø–æ–ª—É—á–µ–Ω—ã: {new_url}, {car_title}")
        return [new_url, car_title]

    except Exception as e:
        logging.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        return None, None

    finally:
        driver.quit()


# Function to calculate the total cost
def calculate_cost(link, message):
    global car_data

    print_message("–ó–ê–ü–†–û–° –ù–ê –†–ê–°–ß–Å–¢ –ê–í–¢–û–ú–û–ë–ò–õ–Ø")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID
    processing_message = bot.send_message(
        message.chat.id, "–î–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ ‚è≥"
    )

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ –º–æ–±–∏–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é
    if "fem.encar.com" in link:
        car_id_match = re.findall(r"\d+", link)
        if car_id_match:
            car_id = car_id_match[0]  # Use the first match of digits
            link = f"https://www.encar.com/dc/dc_cardetailview.do?carid={car_id}"
        else:
            send_error_message(message, "üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å carid –∏–∑ —Å—Å—ã–ª–∫–∏.")
            return

    result = get_car_info(link)

    if result is None:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ get_car_info –¥–ª—è —Å—Å—ã–ª–∫–∏: {link}")
        send_error_message(
            message,
            "üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ.",
        )
        bot.delete_message(message.chat.id, processing_message.message_id)
        return

    new_url, car_title = result

    # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –±—ã–ª–∏ –ø–æ–ª—É—á–µ–Ω—ã
    if not new_url and car_title:
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(
            types.InlineKeyboardButton(
                "–ù–∞–ø–∏—Å–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É", url="https://t.me/hanexport11"
            )
        )
        keyboard.add(
            types.InlineKeyboardButton(
                "üîç –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥—Ä—É–≥–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è",
                callback_data="calculate_another",
            )
        )
        bot.send_message(
            message.chat.id, car_title, parse_mode="Markdown", reply_markup=keyboard
        )
        bot.delete_message(message.chat.id, processing_message.message_id)
        return

    # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–æ–≤–∞—è —Å—Å—ã–ª–∫–∞
    if new_url:
        try:
            response = requests.get(new_url)
            response.raise_for_status()
            json_response = response.json()
        except requests.RequestException as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
            send_error_message(
                message,
                "üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            )
            bot.delete_message(message.chat.id, processing_message.message_id)
            return
        except ValueError:
            logging.error("–ü–æ–ª—É—á–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON.")
            send_error_message(
                message,
                "üö´ –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.",
            )
            bot.delete_message(message.chat.id, processing_message.message_id)
            return

        car_data = json_response

        result = json_response.get("result", {})
        car = result.get("car", {})
        price = result.get("price", {}).get("car", {}).get("krw", 0)

        year = car.get("date", "").split()[-1] if "date" in car else None

        engine_volume_raw = car.get("engineVolume", None)
        engine_volume = re.sub(r"\D+", "", engine_volume_raw)

        if not (year and engine_volume and price):
            logging.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON.")
            bot.send_message(
                message.chat.id,
                "üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É.",
            )
            bot.delete_message(message.chat.id, processing_message.message_id)
            return

        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        engine_volume_formatted = f"{format_number(int(engine_volume))} cc"
        age_formatted = calculate_age(year)

        grand_total = result.get("price", {}).get("grandTotal", 0)
        recycling_fee = (
            result.get("price", {})
            .get("russian", {})
            .get("recyclingFee", {})
            .get("rub", 0)
        )
        duty_cleaning = (
            result.get("price", {})
            .get("korea", {})
            .get("dutyCleaning", {})
            .get("rub", 0)
        )

        total_cost = (
            int(grand_total) - int(recycling_fee) - int(duty_cleaning)
        ) + 110000
        total_cost_formatted = format_number(total_cost)
        price_formatted = format_number(price)

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        result_message = (
            f"–í–æ–∑—Ä–∞—Å—Ç: {age_formatted}\n"
            f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {price_formatted} KRW\n"
            f"–û–±—ä—ë–º –¥–≤–∏–≥–∞—Ç–µ–ª—è: {engine_volume_formatted}\n\n"
            f"–°—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è –ø–æ–¥ –∫–ª—é—á –¥–æ –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫–∞: \n**{total_cost_formatted}‚ÇΩ**\n\n"
            f"üîó [–°—Å—ã–ª–∫–∞ –Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—å]({link})\n\n"
            "–ï—Å–ª–∏ –¥–∞–Ω–Ω–æ–µ –∞–≤—Ç–æ –ø–æ–ø–∞–¥–∞–µ—Ç –ø–æ–¥ —Å–∞–Ω–∫—Ü–∏–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —É—Ç–æ—á–Ω–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≤–∞—à—É —Å—Ç—Ä–∞–Ω—É —É –º–µ–Ω–µ–¥–∂–µ—Ä–∞ @hanexport11\n\n"
            "üîó[–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª](https://t.me/hanexport1)\n"
        )

        bot.send_message(message.chat.id, result_message, parse_mode="Markdown")

        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –¥–∞–ª—å–Ω–µ–π—à–∏–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(
            types.InlineKeyboardButton("üìä –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å—á—ë—Ç–∞", callback_data="detail")
        )
        keyboard.add(
            types.InlineKeyboardButton(
                "üìù –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –æ—Ç—á—ë—Ç –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ",
                callback_data="technical_report",
            )
        )
        keyboard.add(
            types.InlineKeyboardButton(
                "‚úâÔ∏è –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", url="https://t.me/hanexport11"
            )
        )
        keyboard.add(
            types.InlineKeyboardButton(
                "üîç –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥—Ä—É–≥–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è",
                callback_data="calculate_another",
            )
        )

        bot.send_message(message.chat.id, "–ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ?", reply_markup=keyboard)

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–µ—Ä–µ–¥–∞—á–µ –¥–∞–Ω–Ω—ã—Ö –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É
        bot.delete_message(message.chat.id, processing_message.message_id)

    else:
        send_error_message(
            message,
            "üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
        )
        bot.delete_message(message.chat.id, processing_message.message_id)


# Function to get insurance total
def get_insurance_total():
    global car_id_external
    print_message("[–ó–ê–ü–†–û–°] –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ô –û–¢–ß√ã–¢ –û–ë –ê–í–¢–û–ú–û–ë–ò–õ–ï")

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ WebDriver —Å –Ω—É–∂–Ω—ã–º–∏ –æ–ø—Ü–∏—è–º–∏
    chrome_options = Options()
    chrome_options.add_argument("--disable-gpu")
    chrome_options.add_argument("--headless")
    chrome_options.add_argument("--no-sandbox")  # –ù–µ–æ–±—Ö–æ–¥–∏–º –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ Heroku
    chrome_options.add_argument("--disable-dev-shm-usage")  # –†–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–∞–º—è—Ç—å—é
    chrome_options.add_argument("--window-size=1920,1080")  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞
    chrome_options.add_argument("--disable-infobars")
    chrome_options.add_argument("--disable-extensions")
    chrome_options.add_argument("--disable-blink-features=AutomationControlled")
    chrome_options.add_argument("--enable-logging")
    chrome_options.add_argument("--enable-javascript")
    chrome_options.add_argument("--v=1")  # –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    chrome_options.add_argument(
        "user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.150 Safari/537.36"
    )

    service = Service(CHROMEDRIVER_PATH)

    # –§–æ—Ä–º–∏—Ä—É–µ–º URL
    url = f"http://www.encar.com/dc/dc_cardetailview.do?method=kidiFirstPop&carid={car_id_external}&wtClick_carview=044"

    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º WebDriver
        driver = webdriver.Chrome(service=service, options=chrome_options)
        driver.get(url)

        print("car_id_external: ", car_id_external)

        try:
            smlist_element = WebDriverWait(driver, 7).until(
                EC.presence_of_element_located((By.CLASS_NAME, "smlist"))
            )
        except NoSuchElementException:
            print("–≠–ª–µ–º–µ–Ω—Ç 'smlist' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return ["–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"]

        # –ù–∞—Ö–æ–¥–∏–º —Ç–∞–±–ª–∏—Ü—É
        table = smlist_element.find_element(By.TAG_NAME, "table")
        rows = table.find_elements(By.TAG_NAME, "tr")

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        damage_to_my_car = (
            rows[4].find_elements(By.TAG_NAME, "td")[1].text if len(rows) > 4 else "0"
        )
        damage_to_other_car = (
            rows[5].find_elements(By.TAG_NAME, "td")[1].text if len(rows) > 5 else "0"
        )

        # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —á–∏—Å–ª–∞
        def extract_large_number(damage_text):
            if "ÏóÜÏùå" in damage_text:
                return "0"
            numbers = re.findall(r"[\d,]+(?=\s*Ïõê)", damage_text)
            return numbers[0] if numbers else "0"

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        damage_to_my_car_formatted = extract_large_number(damage_to_my_car)
        damage_to_other_car_formatted = extract_large_number(damage_to_other_car)

        return [damage_to_my_car_formatted, damage_to_other_car_formatted]

    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return ["–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö", ""]

    finally:
        driver.quit()


# Callback query handler
@bot.callback_query_handler(func=lambda call: True)
def handle_callback_query(call):
    global car_data, car_id_external, usd_rate

    if call.data.startswith("detail"):
        print("\n\n####################")
        print("[–ó–ê–ü–†–û–°] –î–ï–¢–ê–õ–ò–ó–ê–¶–ò–Ø –†–ê–°–ß√ã–¢–ê")
        print("####################\n\n")

        details = {
            "car_price_korea": car_data.get("result")["price"]["car"]["rub"],
            "dealer_fee": car_data.get("result")["price"]["korea"]["ab"]["rub"],
            "korea_logistics": car_data.get("result")["price"]["korea"]["logistic"][
                "rub"
            ],
            "customs_fee": car_data.get("result")["price"]["korea"]["dutyCleaning"][
                "rub"
            ],
            "delivery_fee": car_data.get("result")["price"]["korea"]["delivery"]["rub"],
            "dealer_commission": car_data.get("result")["price"]["korea"][
                "dealerCommission"
            ]["rub"],
            "russiaDuty": car_data.get("result")["price"]["russian"]["duty"]["rub"],
            "recycle_fee": car_data.get("result")["price"]["russian"]["recyclingFee"][
                "rub"
            ],
            "registration": car_data.get("result")["price"]["russian"]["registration"][
                "rub"
            ],
            "sbkts": car_data.get("result")["price"]["russian"]["sbkts"]["rub"],
            "svhAndExpertise": car_data.get("result")["price"]["russian"][
                "svhAndExpertise"
            ]["rub"],
            "delivery": car_data.get("result")["price"]["russian"]["delivery"]["rub"],
        }

        car_price_formatted = format_number(details["car_price_korea"])
        dealer_fee_formatted = format_number(details["dealer_fee"])
        korea_logistics_formatted = format_number(details["korea_logistics"])
        delivery_fee_formatted = format_number(details["delivery_fee"])
        dealer_commission_formatted = format_number(details["dealer_commission"])
        russia_duty_formatted = format_number(details["russiaDuty"])
        registration_formatted = format_number(details["registration"])
        sbkts_formatted = format_number(details["sbkts"])
        svh_expertise_formatted = format_number(details["svhAndExpertise"])

        # Construct cost breakdown message
        detail_message = (
            "üìù –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å—á—ë—Ç–∞:\n\n"
            f"–°—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ: <b>{car_price_formatted}‚ÇΩ</b>\n\n"
            f"–£—Å–ª—É–≥–∏ HanExport: <b>{dealer_fee_formatted}‚ÇΩ</b>\n\n"
            f"–£—Å–ª—É–≥–∏ –ë—Ä–æ–∫–µ—Ä–∞: <b>{format_number(110000)}‚ÇΩ</b>\n\n"
            f"–õ–æ–≥–∏—Å—Ç–∏–∫–∞ –ø–æ –Æ–∂–Ω–æ–π –ö–æ—Ä–µ–µ: <b>{korea_logistics_formatted}‚ÇΩ</b>\n\n"
            f"–î–æ—Å—Ç–∞–≤–∫–∞ –¥–æ –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫–∞: <b>{delivery_fee_formatted}‚ÇΩ</b>\n\n"
            f"–ö–æ–º–∏—Å—Å–∏—è –¥–∏–ª–µ—Ä–∞: <b>{dealer_commission_formatted}‚ÇΩ</b>\n\n"
            f"–ï–¥–∏–Ω–∞—è —Ç–∞–º–æ–∂–µ–Ω–Ω–∞—è —Å—Ç–∞–≤–∫–∞ (–ï–¢–°): <b>{russia_duty_formatted}‚ÇΩ</b>\n\n"
            f"–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ: <b>{registration_formatted}‚ÇΩ</b>\n\n"
            f"–°–ë–ö–¢–°: <b>{sbkts_formatted}‚ÇΩ</b>\n\n"
            f"–°–í–• + –≠–∫—Å–ø–µ—Ä—Ç–∏–∑–∞: <b>{svh_expertise_formatted}‚ÇΩ</b>\n\n"
        )

        bot.send_message(call.message.chat.id, detail_message, parse_mode="HTML")

        # Inline buttons for further actions
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(
            types.InlineKeyboardButton(
                "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥—Ä—É–≥–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è",
                callback_data="calculate_another",
            )
        )
        keyboard.add(
            types.InlineKeyboardButton(
                "–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", url="https://t.me/hanexport11"
            )
        )

        bot.send_message(
            call.message.chat.id, "–ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ?", reply_markup=keyboard
        )

    elif call.data == "technical_report":
        # Retrieve insurance information
        insurance_info = get_insurance_total()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–∫–∏
        if (
            insurance_info is None
            or "–û—à–∏–±–∫–∞" in insurance_info[0]
            or "–û—à–∏–±–∫–∞" in insurance_info[1]
        ):
            error_message = (
                "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Å—Ç—Ä–∞—Ö–æ–≤—ã—Ö –≤—ã–ø–ª–∞—Ç–∞—Ö. \n\n"
                f'<a href="https://fem.encar.com/cars/report/accident/{car_id_external}">üîó –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç—Ä–∞—Ö–æ–≤—É—é –∏—Å—Ç–æ—Ä–∏—é –≤—Ä—É—á–Ω—É—é üîó</a>'
            )

            # Inline buttons for further actions
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(
                types.InlineKeyboardButton(
                    "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥—Ä—É–≥–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è",
                    callback_data="calculate_another",
                )
            )
            keyboard.add(
                types.InlineKeyboardButton(
                    "–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", url="https://t.me/hanexport11"
                )
            )

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
            bot.send_message(
                call.message.chat.id,
                error_message,
                parse_mode="HTML",
                reply_markup=keyboard,
            )
        else:
            current_car_insurance_payments = (
                "0" if len(insurance_info[0]) == 0 else insurance_info[0]
            )
            other_car_insurance_payments = (
                "0" if len(insurance_info[1]) == 0 else insurance_info[1]
            )

            # Construct the message for the technical report
            tech_report_message = (
                f"–°—Ç—Ä–∞—Ö–æ–≤—ã–µ –≤—ã–ø–ª–∞—Ç—ã –ø–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–º—É –∞–≤—Ç–æ–º–æ–±–∏–ª—é: \n<b>{current_car_insurance_payments} ‚Ç©</b>\n\n"
                f"–°—Ç—Ä–∞—Ö–æ–≤—ã–µ –≤—ã–ø–ª–∞—Ç—ã –¥—Ä—É–≥–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –î–¢–ü: \n<b>{other_car_insurance_payments} ‚Ç©</b>\n\n"
                f'<a href="https://fem.encar.com/cars/report/inspect/{car_id_external}">üîó –°—Å—ã–ª–∫–∞ –Ω–∞ —Å—Ö–µ–º—É –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π –∫—É–∑–æ–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ üîó</a>'
            )

            # Inline buttons for further actions
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(
                types.InlineKeyboardButton(
                    "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥—Ä—É–≥–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è",
                    callback_data="calculate_another",
                )
            )
            keyboard.add(
                types.InlineKeyboardButton(
                    "–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", url="https://t.me/hanexport11"
                )
            )

            bot.send_message(
                call.message.chat.id,
                tech_report_message,
                parse_mode="HTML",
                reply_markup=keyboard,
            )

    elif call.data == "calculate_another":
        bot.send_message(
            call.message.chat.id,
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—å —Å —Å–∞–π—Ç–∞ www.encar.com:",
        )


@bot.message_handler(func=lambda message: True)
def handle_message(message):
    user_message = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å"
    if user_message == "–†–∞—Å—á—ë—Ç":
        bot.send_message(
            message.chat.id,
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—å —Å —Å–∞–π—Ç–∞ www.encar.com:",
        )

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Å—Å—ã–ª–∫–∏
    elif re.match(r"^https?://(www|fem)\.encar\.com/.*", user_message):
        calculate_cost(user_message, message)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã
    elif user_message == "–ù–∞–ø–∏—Å–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É":
        bot.send_message(
            message.chat.id, "–í—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –ø–æ —Å—Å—ã–ª–∫–µ: @hanexport11"
        )
    elif user_message == "–°–≤—è–∑–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ WhatsApp":
        whatsapp_link = "https://wa.me/821084266744"
        bot.send_message(
            message.chat.id,
            f"–í—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏ —á–µ—Ä–µ–∑ WhatsApp –ø–æ —Å—Å—ã–ª–∫–µ: {whatsapp_link}",
        )
    elif user_message == "–û –∫–æ–º–ø–∞–Ω–∏–∏ HanExport":
        about_message = (
            "HanExport ‚Äî —ç—Ç–æ –∫–æ–º–ø–∞–Ω–∏—è, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∞—è—Å—è –Ω–∞ —ç–∫—Å–ø–æ—Ä—Ç–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π "
            "–∏–∑ –Æ–∂–Ω–æ–π –ö–æ—Ä–µ–∏. –ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —à–∏—Ä–æ–∫–∏–π –≤—ã–±–æ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –∏ –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è "
            "–¥–ª—è –Ω–∞—à–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤."
        )
        bot.send_message(message.chat.id, about_message)
    elif user_message == "–ù–∞—à Telegram-–∫–∞–Ω–∞–ª":
        channel_link = "https://t.me/hanexport1"
        bot.send_message(
            message.chat.id, f"–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –Ω–∞—à Telegram-–∫–∞–Ω–∞–ª: {channel_link}"
        )
    elif user_message == "–ü–æ—Å–µ—Ç–∏—Ç—å –Ω–∞—à Instagram":
        instagram_link = "https://www.instagram.com/hanexport1"
        bot.send_message(message.chat.id, f"–ü–æ—Å–µ—Ç–∏—Ç–µ –Ω–∞—à Instagram: {instagram_link}")

    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –Ω–∏ –æ–¥–Ω–æ–º—É –∏–∑ —É—Å–ª–æ–≤–∏–π
    else:
        bot.send_message(
            message.chat.id,
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—å —Å —Å–∞–π—Ç–∞ www.encar.com –∏–ª–∏ fem.encar.com.",
        )


# Utility function to calculate the age category
def calculate_age(year):
    current_year = datetime.datetime.now().year
    age = current_year - int(year)

    if age < 3:
        return f"–î–æ 3 –ª–µ—Ç"
    elif 3 <= age < 5:
        return f"–æ—Ç 3 –¥–æ 5 –ª–µ—Ç"
    else:
        return f"–æ—Ç 5 –ª–µ—Ç"


def format_number(number):
    return locale.format_string("%d", number, grouping=True)


def print_message(message):
    print("\n\n##############")
    print(f"{message}")
    print("##############\n\n")
    return None


# Run the bot
if __name__ == "__main__":
    get_currency_rates()
    set_bot_commands()
    bot.polling(none_stop=True)
